generator client {
  provider = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                            String               @id @default(uuid())
  createdAt                     DateTime             @default(now())
  email                         String?              @unique
  username                      String?              @unique
  isAdmin                       Boolean              @default(false)
  paymentProcessorUserId        String?              @unique
  lemonSqueezyCustomerPortalUrl String?
  subscriptionStatus            String?
  subscriptionPlan              String?
  sendNewsletter                Boolean              @default(false)
  datePaid                      DateTime?
  credits                       Int                  @default(3)
  contactFormMessages           ContactFormMessage[]
  files                         File[]
  gptResponses                  GptResponse[]
  menus                         Menu[]
  tasks                         Task[]
}

model GptResponse {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  content   String
  user      User     @relation(fields: [userId], references: [id])
}

model Task {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  userId      String
  description String
  time        String   @default("1")
  isDone      Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
}

model File {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  name      String
  type      String
  key       String
  uploadUrl String
  user      User     @relation(fields: [userId], references: [id])
}

model DailyStats {
  id                        Int              @id @default(autoincrement())
  date                      DateTime         @unique @default(now())
  totalViews                Int              @default(0)
  prevDayViewsChangePercent String           @default("0")
  userCount                 Int              @default(0)
  paidUserCount             Int              @default(0)
  userDelta                 Int              @default(0)
  paidUserDelta             Int              @default(0)
  totalRevenue              Float            @default(0)
  totalProfit               Float            @default(0)
  sources                   PageViewSource[]
}

model PageViewSource {
  name         String
  date         DateTime    @default(now())
  dailyStatsId Int?
  visitors     Int
  dailyStats   DailyStats? @relation(fields: [dailyStatsId], references: [id])

  @@id([date, name])
}

model Logs {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  message   String
  level     String
}

model ContactFormMessage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  userId    String
  content   String
  isRead    Boolean   @default(false)
  repliedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model Menu {
  id          String        @id @default(uuid())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  name        String
  description String?
  isPublished Boolean       @default(false)
  publicUrl   String        @unique
  userId      String
  currencyCode String       @default("USD")
  currencySymbol String     @default("$")
  currencyPosition String   @default("prefix")
  template    String        @default("default")  // Options: default, no-images
  user        User          @relation(fields: [userId], references: [id])
  sections    MenuSection[]
}

model MenuSection {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  description String?
  position    Int        @default(0)
  menuId      String
  items       MenuItem[]
  menu        Menu       @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model MenuItem {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  name        String
  description String?
  price       Float
  position    Int         @default(0)
  sectionId   String
  imageUrl    String?
  videoUrl    String?
  icon        String?     // Font Awesome icon name
  dietaryTags DietaryTag[]
  allergens   Allergen[]
  section     MenuSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

model DietaryTag {
  id        String     @id @default(uuid())
  name      String     @unique
  icon      String?    // Font awesome icon name or emoji
  items     MenuItem[]
}

model Allergen {
  id        String     @id @default(uuid())
  name      String     @unique
  icon      String?    // Font awesome icon name or emoji
  items     MenuItem[]
}
