import React, { useState, useEffect, useCallback, useMemo } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import { useQuery, useAction } from 'wasp/client/operations';
import { 
  getMenuById, 
  updateMenu, 
  createMenuSection, 
  updateMenuSection, 
  deleteMenuSection,
  createMenuItem,
  updateMenuItem,
  deleteMenuItem,
  publishMenu,
  getMenuItemImageUploadUrl,
  reorderMenuSections,
  reorderMenuItems
} from 'wasp/client/operations';
import { useAuth } from 'wasp/client/auth';
import { toast } from 'react-hot-toast';
import { Menu, MenuSection, MenuItem, assertMenu, assertMenuSection, assertMenuItem } from './types';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import { MenuItemImageUpload } from './components/MenuItemImageUpload';
import { NewItemImageUpload } from './components/NewItemImageUpload';
import axios from 'axios';

// Custom hook for navigation blocking - rewritten to ensure consistent hook execution
const useNavigationBlocker = (
  shouldBlock: boolean,
  message: string = 'You have unsaved changes. Are you sure you want to leave?'
) => {
  const navigate = useNavigate();
  const location = useLocation();

  // Handle browser back/forward buttons and tab/window close
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (shouldBlock) {
        e.preventDefault();
        e.returnValue = message;
        return message;
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, [shouldBlock, message]);

  // Always define these callbacks regardless of shouldBlock to maintain consistent hook order
  const confirmNavigation = useCallback((callback: () => void) => {
    if (!shouldBlock || window.confirm(message)) {
      callback();
    }
  }, [shouldBlock, message]);

  const handleNavigateTo = useCallback((to: string) => {
    confirmNavigation(() => navigate(to));
  }, [confirmNavigation, navigate]);

  const handleNavigateBack = useCallback(() => {
    confirmNavigation(() => navigate(-1));
  }, [confirmNavigation, navigate]);

  // Handle in-app navigation - always define this effect regardless of shouldBlock
  useEffect(() => {
    // This is a placeholder for when useBlocker becomes stable in React Router v6
    return () => {}; // Always return a cleanup function for consistent hook behavior
  }, [shouldBlock, navigate, location]);

  return useMemo(() => ({
    confirmNavigation,
    handleNavigateTo,
    handleNavigateBack
  }), [confirmNavigation, handleNavigateTo, handleNavigateBack]);
};

const MenuEditorPage = () => {
  const params = useParams<{ menuId: string }>();
  const menuId = params.menuId || '';
  const navigate = useNavigate();
  const { data: user } = useAuth();
  
  const { data: menuData, isLoading, error, refetch } = useQuery(getMenuById, { menuId });
  const menu = menuData ? assertMenu(menuData) : null;
  
  const [menuName, setMenuName] = useState('');
  const [menuDescription, setMenuDescription] = useState('');
  const [menuPublicUrl, setMenuPublicUrl] = useState('');
  const [isSaving, setIsSaving] = useState(false);
  const [isPublishing, setIsPublishing] = useState(false);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showPreviewModal, setShowPreviewModal] = useState(false);
  
  // Section state
  const [isAddingSectionOpen, setIsAddingSectionOpen] = useState(false);
  const [newSectionName, setNewSectionName] = useState('');
  const [newSectionDescription, setNewSectionDescription] = useState('');
  const [editingSectionId, setEditingSectionId] = useState<string | null>(null);
  const [editingSectionName, setEditingSectionName] = useState('');
  const [editingSectionDescription, setEditingSectionDescription] = useState('');
  
  // Item state
  const [isAddingItemOpen, setIsAddingItemOpen] = useState<string | null>(null);
  const [newItemName, setNewItemName] = useState('');
  const [newItemDescription, setNewItemDescription] = useState('');
  const [newItemPrice, setNewItemPrice] = useState('');
  const [newItemImageUrl, setNewItemImageUrl] = useState<string | null>(null);
  const [newItemImageFile, setNewItemImageFile] = useState<File | null>(null);
  const [editingItemId, setEditingItemId] = useState<string | null>(null);
  const [editingItemName, setEditingItemName] = useState('');
  const [editingItemDescription, setEditingItemDescription] = useState('');
  const [editingItemPrice, setEditingItemPrice] = useState('');
  const [editingItemImageUrl, setEditingItemImageUrl] = useState<string | null>(null);
  
  // Actions
  const updateMenuFn = useAction(updateMenu);
  const publishMenuFn = useAction(publishMenu);
  const createSectionFn = useAction(createMenuSection);
  const updateSectionFn = useAction(updateMenuSection);
  const deleteSectionFn = useAction(deleteMenuSection);
  const createItemFn = useAction(createMenuItem);
  const updateItemFn = useAction(updateMenuItem);
  const deleteItemFn = useAction(deleteMenuItem);
  const getMenuItemImageUploadUrlFn = useAction(getMenuItemImageUploadUrl);
  const reorderSectionsFn = useAction(reorderMenuSections);
  const reorderItemsFn = useAction(reorderMenuItems);
  
  // Track if menu has been modified
  useEffect(() => {
    if (menu) {
      const isModified = 
        menuName !== menu.name || 
        menuDescription !== (menu.description || '') || 
        menuPublicUrl !== (menu.publicUrl || '');
      
      setHasUnsavedChanges(isModified);
    }
  }, [menuName, menuDescription, menuPublicUrl, menu]);
  
  // Use our custom navigation blocker - now returns an object with navigation handlers
  const { confirmNavigation, handleNavigateTo, handleNavigateBack } = useNavigationBlocker(hasUnsavedChanges);
  
  useEffect(() => {
    if (menu) {
      setMenuName(menu.name);
      setMenuDescription(menu.description || '');
      setMenuPublicUrl(menu.publicUrl || '');
    }
  }, [menu]);
  
  // Always define this callback to maintain consistent hook order
  const openPreview = useCallback(() => {
    // Save any pending changes first
    if (hasUnsavedChanges) {
      if (window.confirm('You have unsaved changes. Save before previewing?')) {
        handleSaveMenu().then(() => {
          setShowPreviewModal(true);
        });
      } else {
        setShowPreviewModal(true);
      }
    } else {
      setShowPreviewModal(true);
    }
  }, [hasUnsavedChanges]);
  
  // Define handleSaveMenu outside of the component render function
  const handleSaveMenu = async () => {
    setIsSaving(true);
    try {
      // Generate a URL-friendly slug if the publicUrl is empty
      let publicUrl = menuPublicUrl.trim();
      if (!publicUrl) {
        publicUrl = menuName.toLowerCase()
          .replace(/[^\w\s-]/g, '') // Remove special characters
          .replace(/\s+/g, '-') // Replace spaces with hyphens
          .replace(/-+/g, '-'); // Replace multiple hyphens with a single one
      }
      
      await updateMenuFn({
        menuId,
        name: menuName,
        description: menuDescription || '',
        publicUrl
      });
      setMenuPublicUrl(publicUrl);
      setHasUnsavedChanges(false);
      refetch();
    } catch (error) {
      console.error('Failed to update menu:', error);
    } finally {
      setIsSaving(false);
    }
  };
  
  const handlePublishMenu = async () => {
    setIsPublishing(true);
    try {
      await publishMenuFn({ menuId });
      setHasUnsavedChanges(false);
      refetch();
    } catch (error) {
      console.error('Failed to publish menu:', error);
    } finally {
      setIsPublishing(false);
      setShowPreviewModal(false);
    }
  };
  
  const startEditItem = (item: MenuItem) => {
    setEditingItemId(item.id);
    setEditingItemName(item.name);
    setEditingItemDescription(item.description || '');
    setEditingItemPrice(item.price.toString());
    setEditingItemImageUrl(item.imageUrl || null);
  };
  
  // Handle drag end for sections and items
  const handleDragEnd = async (result: any) => {
    const { destination, source, draggableId, type } = result;
    
    // No destination or dropped in the same place
    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) {
      return;
    }
    
    try {
      if (type === 'section') {
        if (!menu) return;
        
        // Get current sections and update the order
        const sections = Array.isArray(menu.sections) 
          ? [...menu.sections].map(s => assertMenuSection(s)) 
          : [];
        
        // Reorder the sections array
        const sectionToMove = sections.find(s => s.id === draggableId);
        if (!sectionToMove) return;
        
        const newSections = [...sections];
        newSections.splice(source.index, 1);
        newSections.splice(destination.index, 0, sectionToMove);
        
        // Update the positions on the backend
        const sectionIds = newSections.map(s => s.id);
        await reorderSectionsFn({ menuId, sectionIds });
        refetch();
        setHasUnsavedChanges(true);
        toast.success('Sections reordered successfully');
      } else if (type === 'item') {
        // Format: 'section-{sectionId}'
        const sectionId = source.droppableId.replace('section-', '');
        
        if (!menu) return;
        
        // Get current sections
        const sections = Array.isArray(menu.sections) 
          ? [...menu.sections].map(s => assertMenuSection(s)) 
          : [];
        
        const section = sections.find(s => s.id === sectionId);
        if (!section) return;
        
        // Get items for this section
        const items = Array.isArray(section.items) 
          ? [...section.items].map(i => assertMenuItem(i)) 
          : [];
        
        // Reorder the items array
        const itemToMove = items.find(i => i.id === draggableId);
        if (!itemToMove) return;
        
        const newItems = [...items];
        newItems.splice(source.index, 1);
        newItems.splice(destination.index, 0, itemToMove);
        
        // Update the positions on the backend
        const itemIds = newItems.map(i => i.id);
        await reorderItemsFn({ sectionId, itemIds });
        refetch();
        setHasUnsavedChanges(true);
        toast.success('Items reordered successfully');
      }
    } catch (error) {
      console.error('Failed to reorder:', error);
      toast.error('Failed to reorder items. Please try again.');
    }
  };
  
  // Fix for the Add Item button - ensuring it works correctly
  const handleAddItemClick = (sectionId: string) => {
    setIsAddingItemOpen(sectionId);
  };
  
  if (isLoading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
          <p>Error loading menu: {error.message}</p>
        </div>
      </div>
    );
  }
  
  if (!menu) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded">
          <p>Menu not found</p>
        </div>
      </div>
    );
  }
  
  const handleAddSection = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newSectionName.trim()) return;

    try {
      await createSectionFn({
        menuId,
        name: newSectionName,
        description: newSectionDescription || '',
        position: menu && menu.sections ? menu.sections.length : 0
      });
      setNewSectionName('');
      setNewSectionDescription('');
      setIsAddingSectionOpen(false);
      refetch();
    } catch (error) {
      console.error('Failed to create section:', error);
    }
  };
  
  const handleUpdateSection = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingSectionId || !editingSectionName.trim()) return;

    try {
      await updateSectionFn({
        sectionId: editingSectionId,
        name: editingSectionName,
        description: editingSectionDescription || ''
      });
      setEditingSectionId(null);
      refetch();
    } catch (error) {
      console.error('Failed to update section:', error);
    }
  };
  
  const handleDeleteSection = async (sectionId: string) => {
    if (!window.confirm('Are you sure you want to delete this section and all its items?')) return;
    
    try {
      await deleteSectionFn({ sectionId });
      refetch();
    } catch (error) {
      console.error('Failed to delete section:', error);
    }
  };
  
  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!isAddingItemOpen || !newItemName.trim() || !newItemPrice.trim()) return;
    
    const price = parseFloat(newItemPrice);
    if (isNaN(price)) return;
    
    try {
      const sectionItems = menu.sections?.find(s => s.id === isAddingItemOpen)?.items || [];
      const newItem = await createItemFn({
        sectionId: isAddingItemOpen,
        name: newItemName,
        description: newItemDescription || '',
        price,
        position: sectionItems.length
      });
      
      // If we have an image URL, update the item with it
      if (newItemImageUrl) {
        await updateItemFn({
          itemId: newItem.id,
          imageUrl: newItemImageUrl
        });
      }
      
      setNewItemName('');
      setNewItemDescription('');
      setNewItemPrice('');
      setNewItemImageUrl(null);
      setNewItemImageFile(null);
      setIsAddingItemOpen(null);
      refetch();
    } catch (error) {
      console.error('Failed to create item:', error);
    }
  };
  
  const handleUpdateItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!editingItemId || !editingItemName.trim() || !editingItemPrice.trim()) return;
    
    const price = parseFloat(editingItemPrice);
    if (isNaN(price)) return;
    
    try {
      // Find the current item to get its imageUrl
      const currentItem = menu?.sections
        .flatMap(section => section.items)
        .find(item => item.id === editingItemId);
        
      await updateItemFn({
        itemId: editingItemId,
        name: editingItemName,
        description: editingItemDescription || '',
        price,
        imageUrl: currentItem?.imageUrl || undefined
      });
      setEditingItemId(null);
      refetch();
    } catch (error) {
      console.error('Failed to update item:', error);
    }
  };
  
  const handleDeleteItem = async (itemId: string) => {
    if (!window.confirm('Are you sure you want to delete this item?')) return;
    
    try {
      await deleteItemFn({ itemId });
      refetch();
    } catch (error) {
      console.error('Failed to delete item:', error);
    }
  };
  
  const startEditSection = (section: MenuSection) => {
    setEditingSectionId(section.id);
    setEditingSectionName(section.name);
    setEditingSectionDescription(section.description || '');
  };
  
  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <div className="min-h-screen bg-gray-50 bg-[url('/subtle-food-pattern.png')] bg-opacity-5 bg-fixed">
        {/* Background pattern overlay */}
        <style>{`
          @media (max-width: 768px) {
            .grid-cols-1-2 {
              grid-template-columns: 1fr;
            }
          }
          @media (min-width: 769px) {
            .grid-cols-1-2 {
              grid-template-columns: 1fr 2fr;
            }
          }
        `}</style>
        
        {/* Preview Modal */}
        {showPreviewModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4">
            <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] flex flex-col">
              <div className="p-6 border-b border-gray-200 flex justify-between items-center">
                <h2 className="text-xl font-semibold text-gray-800">Preview Menu</h2>
                <button 
                  onClick={() => setShowPreviewModal(false)}
                  className="text-gray-500 hover:text-gray-700 transition-colors duration-200"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <div className="p-6 overflow-y-auto flex-grow">
                <div className="bg-white rounded-lg shadow-md p-6 mb-6">
                  <h1 className="text-2xl font-bold text-gray-800 mb-2">{menuName}</h1>
                  {menuDescription && <p className="text-gray-600 mb-4">{menuDescription}</p>}
                </div>
                
                {menu?.sections && menu.sections.length > 0 ? (
                  <Droppable droppableId="sections" type="section">
                    {(provided) => (
                      <div 
                        {...provided.droppableProps}
                        ref={provided.innerRef}
                        className="space-y-6"
                      >
                        {menu.sections.map((sectionData, index) => {
                          const section = assertMenuSection(sectionData);
                          return (
                            <Draggable key={section.id} draggableId={section.id} index={index}>
                              {(provided) => (
                                <div 
                                  ref={provided.innerRef}
                                  {...provided.draggableProps}
                                  key={section.id} 
                                  className="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-all duration-200"
                                >
                                  {editingSectionId === section.id ? (
                                    <div className="p-4 bg-amber-50">
                                      <form onSubmit={handleUpdateSection}>
                                        <div className="space-y-4">
                                          <div>
                                            <label htmlFor="editingSectionName" className="block text-sm font-medium text-gray-700">
                                              Section Name
                                            </label>
                                            <input
                                              type="text"
                                              id="editingSectionName"
                                              value={editingSectionName}
                                              onChange={(e) => setEditingSectionName(e.target.value)}
                                              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                                              required
                                            />
                                          </div>
                                          <div>
                                            <label htmlFor="editingSectionDescription" className="block text-sm font-medium text-gray-700">
                                              Description
                                            </label>
                                            <textarea
                                              id="editingSectionDescription"
                                              value={editingSectionDescription}
                                              onChange={(e) => setEditingSectionDescription(e.target.value)}
                                              rows={2}
                                              className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                                            />
                                          </div>
                                          <div className="flex justify-end space-x-3">
                                            <button
                                              type="button"
                                              onClick={() => setEditingSectionId(null)}
                                              className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 hover:shadow transition-all duration-200 flex items-center"
                                            >
                                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                              </svg>
                                              Cancel
                                            </button>
                                            <button
                                              type="submit"
                                              className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 hover:shadow-md transition-all duration-200 flex items-center"
                                            >
                                              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                              </svg>
                                              Save Changes
                                            </button>
                                          </div>
                                        </div>
                                      </form>
                                    </div>
                                  ) : (
                                    <div className="p-4 bg-gray-50 flex justify-between items-center">
                                      <div>
                                        <h3 className="text-lg font-medium text-gray-800">{section.name}</h3>
                                        {section.description && <p className="text-gray-600 mt-1">{section.description}</p>}
                                      </div>
                                      <div className="flex space-x-2">
                                        <div 
                                          {...provided.dragHandleProps} 
                                          className="p-1 text-gray-500 hover:text-amber-600 transition-colors duration-200 flex items-center cursor-grab"
                                          title="Drag to reorder"
                                        >
                                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 9l4-4 4 4m0 6l-4 4-4-4" />
                                          </svg>
                                        </div>
                                        <button
                                          onClick={() => startEditSection(section)}
                                          className="p-1 text-gray-500 hover:text-amber-600 transition-colors duration-200 flex items-center"
                                          title="Edit section"
                                        >
                                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                                          </svg>
                                        </button>
                                        <button
                                          onClick={() => handleDeleteSection(section.id)}
                                          className="p-1 text-gray-500 hover:text-red-600 transition-colors duration-200 flex items-center"
                                          title="Delete section"
                                        >
                                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                          </svg>
                                        </button>
                                      </div>
                                    </div>
                                  )}
                                  
                                  {/* Items */}
                                  <div className="p-4">
                                    <h4 className="text-sm font-medium text-gray-700 mb-3 flex items-center">
                                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-amber-500 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                                      </svg>
                                      Items
                                    </h4>
                                    
                                    {isAddingItemOpen === section.id ? (
                                      <div className="mb-4 p-3 border border-gray-200 rounded-md bg-amber-50">
                                        <form onSubmit={handleAddItem}>
                                          <div className="space-y-3">
                                            <div>
                                              <label htmlFor="newItemName" className="block text-xs font-medium text-gray-700">
                                                Item Name
                                              </label>
                                              <input
                                                type="text"
                                                id="newItemName"
                                                value={newItemName}
                                                onChange={(e) => setNewItemName(e.target.value)}
                                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 text-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                                                required
                                              />
                                            </div>
                                            <div>
                                              <label htmlFor="newItemDescription" className="block text-xs font-medium text-gray-700">
                                                Description
                                              </label>
                                              <textarea
                                                id="newItemDescription"
                                                value={newItemDescription}
                                                onChange={(e) => setNewItemDescription(e.target.value)}
                                                rows={2}
                                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 text-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                                              />
                                            </div>
                                            <div>
                                              <label htmlFor="newItemPrice" className="block text-xs font-medium text-gray-700">
                                                Price ($)
                                              </label>
                                              <input
                                                type="number"
                                                id="newItemPrice"
                                                value={newItemPrice}
                                                onChange={(e) => setNewItemPrice(e.target.value)}
                                                step="0.01"
                                                min="0"
                                                className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1 px-2 text-sm focus:outline-none focus:ring-amber-500 focus:border-amber-500 transition-colors duration-200"
                                                required
                                              />
                                            </div>
                                            
                                            <div>
                                              <label className="block text-xs font-medium text-gray-700">
                                                Item Image
                                              </label>
                                              <MenuItemImageUpload 
                                                itemId={section.items[0].id} 
                                                currentImageUrl={section.items[0].imageUrl} 
                                                onImageUploaded={() => refetch()}
                                              />
                                            </div>
                                            
                                            <div className="flex space-x-2 mt-4">
                                              <button
                                                type="button"
                                                onClick={() => setIsAddingItemOpen(null)}
                                                className="px-3 py-1 border border-gray-300 rounded-md shadow-sm text-xs font-medium text-gray-700 bg-white hover:bg-gray-50 hover:shadow transition-all duration-200 flex items-center"
                                              >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                                </svg>
                                                Cancel
                                              </button>
                                              <button
                                                type="submit"
                                                className="px-3 py-1 border border-transparent rounded-md shadow-sm text-xs font-medium text-white bg-amber-600 hover:bg-amber-700 hover:shadow-md transition-all duration-200 flex items-center"
                                              >
                                                <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                                </svg>
                                                Add Item
                                              </button>
                                            </div>
                                          </div>
                                        </form>
                                      </div>
                                    ) : (
                                      <button
                                        onClick={() => handleAddItemClick(section.id)}
                                        className="flex items-center text-amber-600 hover:text-amber-700 font-medium transition-colors duration-200"
                                      >
                                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                        </svg>
                                        Add Item
                                      </button>
                                    )}
                                  </div>
                                </div>
                              )}
                            </Draggable>
                          );
                        })}
                        {provided.placeholder}
                      </div>
                    )}
                  </Droppable>
                ) : (
                  <div className="bg-gray-50 p-8 rounded-lg text-center border border-gray-200">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 mx-auto text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                    </svg>
                    <h2 className="text-xl font-semibold mb-2 text-gray-700">No sections yet</h2>
                    <p className="text-gray-500 mb-4">Add a section to get started with your menu.</p>
                    <button
                      onClick={() => setIsAddingSectionOpen(true)}
                      className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 hover:shadow-md transition-all duration-200 flex items-center mx-auto"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                      </svg>
                      Add Your First Section
                    </button>
                  </div>
                )}
              </div>
            </div>
            
            {/* Public URL */}
            {menu.isPublished && menu.publicUrl && (
              <div className="bg-white shadow-md rounded-lg p-6 mt-6 border border-gray-100 hover:shadow-lg transition-shadow duration-300">
                <div className="flex items-center mb-4">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-amber-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                  </svg>
                  <h2 className="text-xl font-semibold text-gray-800">Public Menu URL</h2>
                </div>
                <div className="flex items-center flex-wrap md:flex-nowrap gap-2">
                  <div className="relative flex-grow">
                    <input
                      type="text"
                      value={`${window.location.origin}/menu/${menu.publicUrl}`}
                      readOnly
                      className="w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 bg-gray-50 pr-10"
                    />
                    <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
                      </svg>
                    </div>
                  </div>
                  <button
                    onClick={() => {
                      navigator.clipboard.writeText(`${window.location.origin}/menu/${menu.publicUrl}`);
                      alert('URL copied to clipboard!');
                    }}
                    className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-amber-600 hover:bg-amber-700 hover:shadow-md transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                    </svg>
                    Copy URL
                  </button>
                  <a 
                    href={`/menu/${menu.publicUrl}`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 hover:shadow transition-all duration-200 flex items-center"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                    View Menu
                  </a>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </DragDropContext>
  );
};

export default MenuEditorPage; 